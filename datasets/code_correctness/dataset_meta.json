{
    "dataset_name": "CodeCorrectness",
    "license": "MERA_private",
    "dataset_size": 0,
    "description": "Evaluation of the correctness of the written code for Python, Java and Go.",
    "modalities": [
        "text"
    ],
    "skills": [
        "code classification"
    ],
    "domains": [],
    "synt_source_models": [],
    "data_example": {
        "instruction": "Ниже приведён код фокального файла и тестового файла. Определи, является ли тест корректным.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтветь одним словом. Если тест не вызовет ошибок при запуске программы, то верни \"succeed\". Иначе верни \"fail\".",
        "inputs": {
            "focal_code": "import functools\\nimport time\\nfrom collections import OrderedDict\\nfrom typing import Any, Callable, Generic, Iterable, Iterator, Tuple, TypeVar\\n\\nT = TypeVar(\\\"T\\\")\\n\\n\\nclass Cache(Generic[T]):\\n    \\\"\\\"\\\"In-memory LRU cache implementation.\\\"\\\"\\\"\\n\\n    def __init__(self, max_size: int = 500):\\n        self._bag: OrderedDict[Any, Any] = OrderedDict()\\n        self._max_size = -1\\n        self.max_size = max_size\\n\\n    @property\\n    def max_size(self) -> int:\\n        return self._max_size\\n\\n    @max_size.setter\\n    def max_size(self, value: int) -> None:\\n        assert value > 0\\n        self._max_size = int(value)\\n\\n    @property\\n    def is_empty(self) -> bool:\\n        return len(self._bag) == 0\\n\\n    def values(self) -> Iterable[T]:\\n        for _, value in self:\\n            yield value\\n\\n    def keys(self) -> Iterable[Any]:\\n        for key, _ in self:\\n            yield key\\n\\n    def __repr__(self) -> str:\\n        return f\\\"<Cache {len(self)} at {id(self)}>\\\"\\n\\n    def __len__(self) -> int:\\n        return len(self._bag)\\n\\n    def get(self, key, default=None) -> T:\\n        try:\\n            return self[key]\\n        except KeyError:\\n            return default\\n\\n    def set(self, key, value) -> None:\\n        self[key] = value\\n\\n    def _check_size(self):\\n        while len(self._bag) > self.max_size:\\n            self._bag.popitem(last=False)\\n\\n    def __getitem__(self, key) -> T:\\n        value = self._bag[key]\\n        self._bag.move_to_end(key, last=True)\\n        return value\\n\\n    def __setitem__(self, key, value: T) -> None:\\n        if key in self._bag:\\n            self._bag[key] = value\\n            self._bag.move_to_end(key, last=True)\\n        else:\\n            self._bag[key] = value\\n            self._check_size()\\n\\n    def __delitem__(self, key) -> None:\\n        del self._bag[key]\\n\\n    def __contains__(self, key) -> bool:\\n        return key in self._bag\\n\\n    def __iter__(self) -> Iterator[Tuple[Any, T]]:\\n        return iter(self._bag.items())\\n\\n    def clear(self) -> None:\\n        self._bag.clear()\\n\\n\\nclass CachedItem(Generic[T]):\\n    \\\"\\\"\\\"Container for cached items with update timestamp.\\\"\\\"\\\"\\n\\n    __slots__ = (\\\"_value\\\", \\\"_time\\\")\\n\\n    def __init__(self, value: T):\\n        self._value = value\\n        self._time = time.time()\\n\\n    @property\\n    def value(self) -> T:\\n        return self._value\\n\\n    @value.setter\\n    def value(self, value: T):\\n        self._value = value\\n        self._time = time.time()\\n\\n    @property\\n    def time(self) -> float:\\n        return self._time\\n\\n\\nclass ExpiringCache(Cache[T]):\\n    \\\"\\\"\\\"A cache whose items can expire by a given function.\\\"\\\"\\\"\\n\\n    def __init__(\\n        self, expiration_policy: Callable[[CachedItem[T]], bool], max_size: int = 500\\n    ):\\n        super().__init__(max_size)\\n        assert expiration_policy is not None\\n        self.expiration_policy = expiration_policy\\n\\n    @property\\n    def full(self) -> bool:\\n        return self.max_size <= len(self._bag)\\n\\n    def expired(self, item: CachedItem) -> bool:\\n        return self.expiration_policy(item)\\n\\n    def _remove_expired_items(self):\\n        for key, item in list(self._bag.items()):\\n            if self.expired(item):\\n                del self[key]\\n\\n    def _check_size(self):\\n        if self.full:\\n            self._remove_expired_items()\\n        super()._check_size()\\n\\n    def __getitem__(self, key) -> Any:\\n        item = self._bag[key]\\n        if self.expired(item):\\n            del self._bag[key]\\n            raise KeyError(key)\\n\\n        self._bag.move_to_end(key, last=True)\\n        return item.value\\n\\n    def __setitem__(self, key, value: T) -> None:\\n        if key in self._bag:\\n            self._bag[key].value = value\\n            self._bag.move_to_end(key, last=True)\\n        else:\\n            self._bag[key] = CachedItem(value)\\n            self._check_size()\\n\\n    @classmethod\\n    def with_max_age(cls, max_age: float, max_size: int = 500):\\n        \\\"\\\"\\\"\\n        Returns an instance of ExpiringCache whose items are invalidated\\n        when they were set more than a given number of seconds ago.\\n        \\\"\\\"\\\"\\n        return cls(lambda item: time.time() - item.time > max_age, max_size)\\n\\n    def __contains__(self, key) -> bool:\\n        if key not in self._bag:\\n            return False\\n        # remove if expired\\n        try:\\n            self[key]\\n        except KeyError:\\n            return False\\n        return True\\n\\n    def __iter__(self) -> Iterator[Tuple[Any, T]]:\\n        \\\"\\\"\\\"Iterates through cached items, discarding and removing expired ones.\\\"\\\"\\\"\\n        for key, item in list(self._bag.items()):\\n            if self.expired(item):\\n                del self[key]\\n            else:\\n                yield (key, item.value)\\n\\n\\ndef lazy(max_seconds: int = 1, cache=None):\\n    \\\"\\\"\\\"\\n    Wraps a function so that it is called up to once\\n    every max_seconds, by input arguments.\\n    Results are stored in a cache, by default a LRU cache of max size 500.\\n\\n    To have a cache without size limit, use a dictionary: @lazy(1, {})\\n    \\\"\\\"\\\"\\n    assert max_seconds > 0\\n    if cache is None:\\n        cache = Cache(500)\\n\\n    def lazy_decorator(fn):\\n        setattr(fn, \\\"cache\\\", cache)\\n\\n        @functools.wraps(fn)\\n        def wrapper(*args):\\n            now = time.time()\\n            try:\\n                value, updated_at = cache[args]\\n                if now - updated_at > max_seconds:\\n                    raise AttributeError\\n            except (KeyError, AttributeError):\\n                value = fn(*args)\\n                cache[args] = (value, now)\\n            return value\\n\\n        return wrapper\\n\\n    return lazy_decorator\\n",
            "test_code": "import time\\n\\nimport pytest\\n\\nfrom essentials.caching import Cache, ExpiringCache, lazy\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndef test_expiration_policy_with_max_age():\\n    cache = ExpiringCache.with_max_age(0.1)\\n    cache[\\\"foo\\\"] = \\\"Foo\\\"\\n\\n    time.sleep(0.2)\\n\\n    assert cache.get(\\\"foo\\\") is None\\n\\n    cache[\\\"foo\\\"] = \\\"Foo\\\"\\n\\n    time.sleep(0.2)\\n\\n    assert \\\"foo\\\" not in cache\\n",
            "lang": "Python"
        },
        "outputs": "success",
        "meta": {
            "id": 1
        }
    },
    "data_field_descriptions": {
        "instruction": {
            "en": "Instruction prompt template with question elements placeholders.",
            "ru": "Промпт-инструкция для модели, содержащая шаблон для вставки элементов вопроса."
        },
        "inputs": {
            "focal_code": {
                "en": "Source code from the focal file",
                "ru": "Исходный код фокального файла"
            },
            "test_code": {
                "en": "Source code from the test file",
                "ru": "Исходный код тестового файла"
            },
            "lang": {
                "en": "Programming language of this sample",
                "ru": "Язык программирования данного примера"
            }
        },
        "outputs": {
            "en": "Answer of the model, should be either \"succeed\" or \"fail\"",
            "ru": "Ответ модели, должен быть succeed или fail"
        },
        "meta": {
            "id": {
                "en": "Identification number of the question in the dataset.",
                "ru": "Номер-идентификатор вопроса в датасете."
            }
        }
    },
    "prompts": [
        "Ниже приведён код фокального файла и тестового файла. Определи, является ли тест корректным.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтветь одним словом. Если тест не вызовет ошибок при запуске программы, то верни \"succeed\". Иначе верни \"fail\".",
        "Посмотри на код фокального файла и тестового файла. Определи, является ли тест корректным.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтветь одним словом. Если тест не вызовет ошибок при запуске программы, то верни \"succeed\". Иначе верни \"fail\".",
        "Ниже представлен код фокального и тестового файлов. Убедись, что тестирование выполняется правильно.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтветь одним словом. Если тест завершится успешно, напиши \"succeed\"; если возникнут ошибки — \"fail\".",
        "Вот код фокального и тестового файлов. Проверь, корректен ли тест.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nДай короткий ответ: если тест пройдет без ошибок, скажи \"succeed\", иначе — \"fail\".",
        "Ниже ты увидишь фокальный и тестовый файлы. Подскажи, верно ли написан тест.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nНапиши одно слово: если тест выполнится без проблем, отвечай \"succeed\", если появятся ошибки — \"fail\".\n",
        "Внизу приведены коды фокальной и тестовой частей. Оцените правильность теста.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтвечайте лаконично: если тест отработает корректно, напишите \"succeed\", если будут ошибки — \"fail\".",
        "Ниже даны фокальный и тестовый файлы. Пожалуйста, проверьте, будет ли тест выполнен корректно.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nВаш ответ: если тест сработает без ошибок, напишите \"succeed\", если нет — \"fail\".\n",
        "Вот фокальный и тестовый файлы. Нужно определить, работает ли тест корректно.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОтветьте одним словом: если тест завершится удачно, напишите \"succeed\", если возникнут проблемы — \"fail\".",
        "Предложены фокальный и тестовый файлы. Проверяйте, проходит ли тест без ошибок.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nОднозначный ответ: если тест успешен, напишите \"succeed\", если возникают ошибки — \"fail\".\n",
        "Приведены два файла: фокальный и тестовый. Проанализируйте, выполним ли тест без ошибок.\n\nФокальный файл:\n\n{lang}\n\n{focal}\n\n\nТестовый файл:\n\n{lang}\n\n{test}\n\nКраткий ответ: если тест пройден успешно, ответьте \"succeed\", если возникли ошибки — \"fail\".\n"
    ],
    "metrics": {
        "Accuracy": {
            "en": "Accuracy is the proportion of correct model predictions among the total number of cases processed.",
            "ru": "Метрика Accuracy вычисляет долю правильных предсказаний модели среди всех обработанных вопросов."
        }
    }
}