{
    "dataset_name": "UnitTests",
    "license": "MERA_private",
    "dataset_size": "len(DATA)",
    "description": "Evaluation of unit-test generation for functions and methods in five programming languages (Java, Python, Go, JavaScript, and C#).",
    "modalities": [
        "code"
    ],
    "skills": [
        "Unit-tests generation",
        "Code generation",
        "Instruction following"
    ],
    "domains": [],
    "universal_domains": [],
    "data_example": {
        "instruction": "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}",
        "inputs": {
            "focal_func": "```go\nfunc MergeSorted(l, f *List) (m *List, ok bool) {\n\tm = new(List)\n\tfor l.Len() > 0 || f.Len() > 0 {\n\t\tvl, nl, okl := PopInt(l)\n\t\tvf, nf, okf := PopInt(f)\n\t\tif !okl || !okf {\n\t\t\treturn m, false\n\t\t}\n\n\t\tll, n := l, nl // The assumption is: vl <= vf.\n\t\tswitch {\n\t\tcase l.Len() == 0:\n\t\t\tll, n = f, nf\n\t\tcase f.Len() == 0:\n\t\t\tll, n = l, nl\n\t\tcase vl > vf:\n\t\t\tll, n = f, nf\n\t\t}\n\n\t\tm.Insert(ll.Remove(n))\n\t}\n\treturn m, true\n}\n```",
            "focal_func_context": "```go\n#lists/mergesorted.go\n// Copyright (c) 2015, Peter Mrekaj. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE.txt file.\n\npackage lists\n\n// MergeSorted merges int nodes from l and f sorted lists into the ordered list m.\n// Note: when l or f contains different type from int then false is returned and\n// merged list will contains some value(s) merged from l or f up to the different\n// type.\n\n#focal function/method here\n```",
            "test_func_type": "тестовую функцию",
            "test_func_context": "```\n// Copyright (c) 2015, Peter Mrekaj. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE.txt file.\npackage lists\nimport (\n\t\"math/rand\"\n\t\"reflect\"\n\t\"sort\"\n\t\"testing\"\n)\n```",
            "language": "Go",
            "focal_file_path": "lists/mergesorted.go",
            "test_file_path": "lists/mergesorted_test.go",
            "test_framework": ""
        },
        "outputs": "func TestMergeSorted(t *testing.T) {\n\tconst (\n\t\tmaxInt = int(^uint(0) >> 1)\n\t\tminInt = -maxInt - 1\n\t)\n\tfor _, test := range []struct {\n\t\tl, f []interface{}\n\t\twant []interface{}\n\t\tok   bool\n\t}{\n\t\t{[]interface{}{0}, []interface{}{0}, []interface{}{0, 0}, true},\n\t\t{[]interface{}{0}, []interface{}{-1, 1}, []interface{}{-1, 0, 1}, true},\n\t\t{[]interface{}{2, 5, 7}, []interface{}{3, 11}, []interface{}{2, 3, 5, 7, 11}, true},\n\t\t{[]interface{}{1, 3, 5}, []interface{}{2, 4, 6}, []interface{}{1, 2, 3, 4, 5, 6}, true},\n\t\t{[]interface{}{maxInt}, []interface{}{minInt}, []interface{}{minInt, maxInt}, true},\n\t\t{[]interface{}{1, \"b\", 3}, []interface{}{0}, []interface{}{0, 1}, false},\n\t\t{[]interface{}{0}, []interface{}{1, \"b\", 3}, []interface{}{0, 1}, false},\n\t} {\n\t\tl, f := NewFromSlice(test.l), NewFromSlice(test.f)\n\t\tm, ok := MergeSorted(l, f)\n\t\tif test.ok && (l.head != nil || f.head != nil) {\n\t\t\tt.Errorf(\"MergeSorted(%v, %v) got l.First() = %v, f.First() = %v; want <nil>, <nil>\", test.l, test.f, l.First(), f.First())\n\t\t}\n\t\tif got := m.ToSlice(); ok != test.ok || !reflect.DeepEqual(got, test.want) {\n\t\t\tt.Errorf(\"MergeSorted(%v, %v) = %v, %t; want %v, %t\", test.l, test.f, got, ok, test.want, test.ok)\n\t\t}\n\t}\n}",
        "meta": {
            "id": 5,
            "repo_id": "38174748",
            "focal_func_type": "function"
        }
    },
    "data_field_descriptions": {
        "instruction": {
            "ru": "default",
            "en": "default"
        },
        "inputs": {
            "focal_func": {
                "ru": "тестируемая функция/метод для тестирования",
                "en": "the focal function/method"
            },
            "test_func_type": {
                "ru": "тип теста (function/method)",
                "en": "a type of the test"
            },
            "test_func_context": {
                "ru": "контекст тестовой функции, собранный из тестового файла - импорты, глобальные переменные, краткое описание других функций/классов",
                "en": "test function context from the test file"
            },
            "language": {
                "ru": "язык программирования (python, java, csharp, js, go)",
                "en": "programming language (python, java, csharp, js, go)"
            },
            "focal_file_path": {
                "ru": "путь к файлу тестируемой функции/метода в исходном репозитории",
                "en": "the focal function/method file path"
            },
            "test_file_path": {
                "ru": "путь к файлу тестовой функции/метода в исходном репозитории",
                "en": "the test function/method file path"
            },
            "focal_func_context": {
                "ru": "контекст фокальной функции: текст фокального файла, откуда вырезан сам тестируемый метод и заменен на текст `#focal function/method here`",
                "en": "focal function context: the focal file text where the focal method is replaced with the text `#focal function/method here`"
            },
            "test_framework": {
                "ru": "тестовый фреймворк, который необходимо использовать (только для JS)",
                "en": "test framework that should be used (only for JS)"
            }
        },
        "outputs": {
            "ru": "default",
            "en": "default"
        },
        "meta": {
            "id": {
                "ru": "default",
                "en": "default"
            },
            "repo_id": {
                "ru": "Идентификатор репозитория",
                "en": "The github id of the repository"
            },
            "focal_func_type": {
                "ru": "тип тестируемоего объекта(function/method)",
                "en": "a type of the focal object"
            }
        }
    },
    "prompts": [
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. \nВот код, который надо протестировать:\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nНапиши только {test_func_type} без пояснений и комментариев. Не забывай соблюдать синтаксис языка {language}.\nОформи свой ответ с соблюдением markdown разметки для кода: ```<language>\n<your code>\n```.\n",
        "Ты - помощник программиста. Твоя задача - писать юнит-тесты для данного тебе кода на языке {language}.\nСоставь тест для следующего кода на языке {language}, расположенного в '{focal_file_path}'. В ответе должен быть только тест.\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nКод, который необходимо протестировать:\n{focal_func}\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле:  \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}. \nНапиши только {test_func_type} и оформи ответ так: ```<language>\n<your code>\n```.\nТы - помощник тестировщика. Твоя задача - писать юнит-тесты для данного тебе кода на языке {language}.\nНапиши тест для этого кода на языке {language} из файла '{focal_file_path}':\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nПользователь уже написал некоторый код в тестовом файле, учитывай его при написании теста: \n{test_func_context}\nВ ответе пиши только {test_func_type}, не добавляя комментариев и текста. \nОформи свой ответ с соблюдением markdown разметки для кода: ```<language>\n<your code>\n```.\n",
        "Сделай тест для этого кода, написанного на {language} из файла '{focal_file_path}'. Напиши только тестовый код.\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{focal_func_context}\nКод для тестирования:\n{focal_func}\nУчитывай контекст приведенного кода: \n{test_func_context}\nВ ответе нужно написать только {test_func_type}, оформи так: ```<language>\n<your code>\n```.\n",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'.\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле: \n{test_func_context}\nОбращай внимание на следующий код при написании теста: \n{focal_func_context}\nКод для тестирования:\n{focal_func}\nНапиши только {test_func_type} без каких-либо пояснений или комментариев.\nТвой ответ должен быть оформлен с помощью markdown следующим образом: ```<language>\n<your code>\n```.\n",
        "Ты - программист на языке {language} и сейчас пишешь юнит-тесты для кода из проекта.\nПосмотри на код, который необходимо протестировать:\n{focal_func}\nЭто код из файла '{focal_file_path}'.\nОбрати внимание на остальной код из этого файла:\n{focal_func_context}\nРазработчик начал писать тесты для данного кода:\n{test_func_context}\nНапиши {test_func_type} для этого кода, ориентируясь на указанные сущности и приведенный образец. \nТвой код будет помещен в файл '{test_file_path}'.\nНапиши только {test_func_type}. Не веди диалог, не извиняйся, не давай объяснений и не рассуждай. Не забывай соблюдать синтаксис {language}.\nОберни свой тест в markdown, как показано в шаблоне: ```<language>\n<your code>\n```.\n",
        "Ты - профессиональный тестировщик, пишущий юнит-тесты на языке {language}.\nТебе необходимо протестировать следующий код из файла '{focal_file_path}':\n{focal_func}\nРазработчик подготовил для тебя некоторые сущности в тестовом файле ('{test_file_path}').\n{test_func_context}\nЭто остальной код из файла '{focal_file_path}':\n{focal_func_context}\nСоставь {test_func_type}, опираясь на весь код, приведенный выше.\nНапиши только {test_func_type} на языке {language}, не давай никаких дополнительный комментариев и пояснений.\nТвое решение должно быть оформлено с помощью markdown по шаблону: ```<language>\n<your code>\n```.\n",
        "Ваша задача — написать {test_func_type} на языке {language} для кода из файла'{focal_file_path}'.\nК тестированию предоставлен следующий фрагмент кода:\n{focal_func}\nДополнительный контекст исходного файла:\n{focal_func_context}\nТакже вот что уже объявлено или импортировано для вас в будущем тестовом файле'{test_file_path}':\n{test_func_context}\nВ ответе предоставляйте исключительно {test_func_type}, никаких комментариев.\nВаш ответ должен быть оформлен с помощью markdown следующим образом: ```<language>\n<your code>\n```.\n",
        "Ваша задача: лаконично и строго написать {test_func_type} на {language} для следующего кода из файла '{focal_file_path}':\n{focal_func}\nВы можете использовать только эти сущности, уже определённые в тестовом файле ('{test_file_path}'):\n{test_func_context}\nИзучите остальной код файла '{focal_file_path}' для понимания контекста:\n{focal_func_context}\nЗапрещено включать дополнительные пояснения, любой текст вне кода, обсуждение ограничений или вариантов. Нужно написать только {test_func_type}.\nОберните ваш тест в markdown, как показано в шаблоне: ```<language>\n<your code>\n```.\n",
        "Вы — специалист по unit-тестам. Вам нужно реализовать {test_func_type} на языке {language} для кода ниже:\nТестируется код из '{focal_file_path}':\n{focal_func}\nВы можете использовать только эти сущности, уже определённые в тестовом файле ('{test_file_path}'):\n{test_func_context}\nТакже вам доступен контекст функции:\n{focal_func_context}\nТребование: предоставить только {test_func_type}, не включать комментарии, объяснения или формат личного обращения. Не разъясняйте свой выбор.\nВаше решение должно быть оформлено с помощью markdown по шаблону: ```<language>\n<your code>\n```.\n",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'.\nВот код, который надо протестировать: \n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language} с использованием {test_framework} в качестве тестового фреймворка. \nТест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nНапиши только {test_func_type} без пояснений и комментариев. Не забывай соблюдать синтаксис языка {language}.\nОформи свой ответ с соблюдением markdown разметки для кода: ```<language>\n<your code>\n```.\n",
        "Ты - помощник программиста. Твоя задача - писать юнит-тесты для данного тебе кода на языке {language}.\nСоставь тест для следующего кода на языке {language}, расположенного в '{focal_file_path}'. В ответе должен быть только тест.\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nКод, который необходимо протестировать:\n{focal_func}\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле:  \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nУчти, что в репозитории используется {test_framework} в качестве тестового фреймворка, ты также должен использовать его.\nНапиши только {test_func_type} и оформи ответ так: ```<language>\n<your code>\n```.\n",
        "Ты - помощник тестировщика. Твоя задача - писать юнит-тесты для данного тебе кода на языке {language}.\nНапиши тест для этого кода на языке {language} из файла '{focal_file_path}':\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nПользователь уже написал некоторый код в тестовом файле, учитывай его при написании теста: \n{test_func_context}\nУчти, что в репозитории используется {test_framework} в качестве тестового фреймворка, ты также должен использовать его.\nВ ответе пиши только {test_func_type}, не добавляя комментариев и текста.\nОформи свой ответ с соблюдением markdown разметки для кода: ```<language>\n<your code>\n```.\n",
        "Сделай тест для этого кода, написанного на {language} из файла '{focal_file_path}'. Напиши только тестовый код.\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{focal_func_context}\nТвой тест должен быть написан для тестового фреймворка {test_framework}.\nКод для тестирования:\n{focal_func}\nУчитывай контекст приведенного кода: \n{test_func_context}\nВ ответе нужно написать только {test_func_type}, оформи так: ```<language>\n<your code>\n```.\n",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'.\nТебе необходимо написать {test_func_type} на языке {language}, использя тестовый фреймворк {test_framework}. Тест будет помещен в файл '{test_file_path}'.\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле: \n{test_func_context}\nОбращай внимание на следующий код при написании теста: \n{focal_func_context}\nКод для тестирования:\n{focal_func}\nНапиши только {test_func_type} без каких-либо пояснений или комментариев.\nТвой ответ должен быть оформлен с помощью markdown следующим образом: ```<language>\n<your code>\n```.\n",
        "Ты - программист на языке {language} и сейчас пишешь юнит-тесты для кода из проекта.\nПосмотри на код, который необходимо протестировать:\n{focal_func}\nЭто код из файла '{focal_file_path}'.\nОбрати внимание на остальной код из этого файла:\n{focal_func_context}\nРазработчик начал писать тесты для данного кода:\n{test_func_context}\nНапиши {test_func_type} для этого кода с использованием фреймворка {test_framework}, ориентируясь на указанные сущности и приведенный образец. \nТвой код будет помещен в файл '{test_file_path}'.\nНапиши только {test_func_type}. Не веди диалог, не извиняйся, не давай объяснений и не рассуждай. Не забывай соблюдать синтаксис {language}.\nОберни свой тест в markdown, как показано в шаблоне: ```<language>\n<your code>\n```.\n",
        "Ты - профессиональный тестировщик, пишущий юнит-тесты на языке {language}.\nТебе необходимо протестировать следующий код из файла '{focal_file_path}':\n{focal_func}\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nРазработчик подготовил для тебя некоторые сущности в тестовом файле ('{test_file_path}').\n{test_func_context}\nЭто остальной код из файла '{focal_file_path}':\n{focal_func_context}\nСоставь {test_func_type}, опираясь на весь код, приведенный выше.\nНапиши только {test_func_type} на языке {language}, не давай никаких дополнительный комментариев и пояснений.\nТвое решение должно быть оформлено с помощью markdown по шаблону: ```<language>\n<your code>\n```.\n",
        "Ваша задача — написать {test_func_type} на языке {language} для кода из файла'{focal_file_path}'.\nК тестированию предоставлен следующий фрагмент кода:\n{focal_func}\nДополнительный контекст исходного файла:\n{focal_func_context}\nТакже вот что уже объявлено или импортировано для вас в будущем тестовом файле'{test_file_path}':\n{test_func_context}\nИспользуйте {test_framework} тестовый фреймворк для написания тестового кода.\nВ ответе предоставляйте исключительно {test_func_type}, никаких комментариев.\nВаш ответ должен быть оформлен с помощью markdown следующим образом: ```<language>\n<your code>\n```.\n",
        "Ваша задача: лаконично и строго написать {test_func_type} на {language} для следующего кода из файла '{focal_file_path}':\n{focal_func}\nКод теста должен использовать {test_framework} фреймворк. \nВы можете использовать только эти сущности, уже определённые в тестовом файле ('{test_file_path}'):\n{test_func_context}\nИзучите остальной код файла '{focal_file_path}' для понимания контекста:\n{focal_func_context}\nЗапрещено включать дополнительные пояснения, любой текст вне кода, обсуждение ограничений или вариантов. Напиши только {test_func_type}.\nОберните ваш тест в markdown, как показано в шаблоне: ```<language>\n<your code>\n```.\n",
        "Вы — специалист по unit-тестам. Вам нужно реализовать {test_func_type} на языке {language} для кода ниже:\nТестируется код из '{focal_file_path}':\n{focal_func}\nВы можете использовать только эти сущности, уже определённые в тестовом файле ('{test_file_path}'):\n{test_func_context}\nТакже вам доступен контекст функции:\n{focal_func_context}\nКод теста должен использовать {test_framework} фреймворк. \nТребование: предоставить только {test_func_type}, не включать комментарии, объяснения или формат личного обращения. Не разъясняйте свой выбор.\nВаше решение должно быть оформлено с помощью markdown по шаблону: ```<language>\n<your code>\n```.\n"
    ],
    "metrics": {
        "CodeBLEU": {
            "ru": "Code BLEU учитывает соответствие двух частей кода, аналогичное исходному BLEU, но может также учитывать грамматическую и логическую корректность, используя абстрактное синтаксическое дерево и структуру потока данных.",
            "en": "CodeBLEU considers the surface match similar with the original BLEU, but can also consider the grammatical correctness and the logic correctness, leveraging the abstract syntax tree and the data-flow structure.",
            "short": "code_bleu"
        }
    }
}