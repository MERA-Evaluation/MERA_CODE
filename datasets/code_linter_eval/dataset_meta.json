{"dataset_name": "CodeLinterEval", "license": "MERA_private", "dataset_size": "120", "description": "Benchmark for evaluation of correct code generation based on incorrect code and a list of errors/warnings from the linter.", "modalities": ["code"], "skills": ["Instruction following", "Perception(Python)", "Code changing"], "domains": [], "universal_domains": [], "synt_source_models": "", "data_example": {"instruction": "\u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0438 \u043a\u043e\u0434 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430. \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430:{feedback}", "inputs": {"code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "feedback": "E111: indentation is not a multiple of 4 in 2 line\nE231: missing whitespace after ',' in 2 line\nE111: indentation is not a multiple of 4 in 4 line\nW292: no newline at end of file in 4 line\n"}, "outputs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "meta": {"id": 0, "canonical_code": "\ndef find_repeated_character(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}}, "data_field_descriptions": {"instruction": {"ru": "\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438", "en": "string containing the formulation of a query to the language model"}, "inputs": {"code": {"ru": "\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043a\u043e\u0434 \u043d\u0430 Python, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0448\u0438\u0431\u043a\u0438", "en": "string containing Python code that contains errors"}, "feedback": {"ru": "\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430", "en": "string containing a description of errors from the linter"}}, "outputs": {"ru": "\u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0440\u0430\u0437\u043c\u0435\u0440\u0430 n_samples, \u0433\u0434\u0435 n_samples - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u044d\u043c\u043f\u043b\u043e\u0432, \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 pass@k", "en": "one-dimensional array of strings of size n_samples, where n_samples is the number of samples required to calculate the pass@k metric"}, "meta": {"id": {"ru": "\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u043d\u0438\u044f", "en": "task id"}, "canonical_code": {"ru": "\u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u043a\u043e\u0434 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a/\u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439 \u043b\u0438\u043d\u0442\u0435\u0440\u0430) \u0437\u0430\u0434\u0430\u043d\u0438\u044f", "en": "canonical solution to the task (code without linter errors/warnings)"}}}, "prompts": ["\u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0438 \u043a\u043e\u0434 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430. \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430:{feedback}", "\u0418\u0441\u043f\u0440\u0430\u0432\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435: \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438:{feedback}", "\u041f\u0435\u0440\u0435\u0434 \u0442\u043e\u0431\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438. \u0412\u043d\u0435\u0441\u0438 \u043f\u0440\u0430\u0432\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043b\u0438\u043d\u0442\u0435\u0440\u0430:{feedback} \n\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434: {code}", "\u041e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438 \u044d\u0442\u043e\u0442 \u043a\u043e\u0434, \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0432 \u0432\u0441\u0435 \u043e\u0448\u0438\u0431\u043a\u0438: \n\u041a\u043e\u0434: {code} \n\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a: {feedback}  ", "\u041b\u0438\u043d\u0442\u0435\u0440 \u0432\u044b\u0434\u0430\u043b \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f. \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0438 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c: \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430:{feedback}", "\u0412\u043e\u0442 \u043a\u043e\u0434 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430. \u0421\u0434\u0435\u043b\u0430\u0439 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0434 \u0431\u044b\u043b \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a: \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438:{feedback}", "\u041f\u0435\u0440\u0435\u0434 \u0442\u043e\u0431\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u043e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u0430. \u0423\u0441\u0442\u0440\u0430\u043d\u0438 \u0432\u0441\u0435 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430: \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438:{feedback}", "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u043c. \u041f\u0440\u0438\u0432\u0435\u0434\u0438 \u0435\u0433\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438. \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438:{feedback}", "\u041e\u0431\u043d\u043e\u0432\u0438 \u043a\u043e\u0434, \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0432 \u0432\u0441\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0435\u0432\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438. \n\u041a\u043e\u0434: {code} \n\u041e\u0448\u0438\u0431\u043a\u0438:{feedback}", "\u041f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u0439 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043b\u0438\u043d\u0442\u0435\u0440\u0430:{feedback}. \n\u041a\u043e\u0434: {code}"], "metrics": {"pass@k": {"ru": "\u041c\u0435\u0442\u0440\u0438\u043a\u0430 pass@k \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442 \u0434\u043e\u043b\u044e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442, \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432", "en": "The pass@k metric measures the proportion of test cases that a program passes out of the total number of test cases."}}, "human_benchmark": {"pass@k": 1.0}}