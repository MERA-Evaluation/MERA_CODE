{"dataset_name": "CodeLinterEval", "license": "MERA_private", "dataset_size": "120", "description": "Benchmark for evaluation of correct code generation based on incorrect code and a list of errors/warnings from the linter.", "modalities": ["code"], "skills": ["Instruction following", "Perception(Python)", "Code changing"], "domains": [], "universal_domains": [], "synt_source_models": "", "data_example": {"instruction": "Перепиши код с учетом ошибок полученных от линтера. Ошибки указывают на критические слабые места: потенциальные баги, уязвимости безопасности и нарушения принципов чистого кода. Исправь ВСЕ указанные ошибки без исключений, сохрани исходную логику программы, строго соблюдай PEP-8 для Python, не добавляй комментарии и объяснения. \nЗамечания линтера:\n{feedback}\n\nКод:\n{code}\nПриведите ответ в формате, соответствующем шаблону для ответа:\n```python\n<code> ```", "inputs": {"code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "feedback": "E111: indentation is not a multiple of 4 in 2 line\nE231: missing whitespace after ',' in 2 line\nE111: indentation is not a multiple of 4 in 4 line\nW292: no newline at end of file in 4 line\n"}, "outputs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "meta": {"id": 0, "canonical_code": "\ndef find_repeated_character(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}}, "data_field_descriptions": {"instruction": {"ru": "строка, содержащая формулировку запроса к языковой модели", "en": "string containing the formulation of a query to the language model"}, "inputs": {"code": {"ru": "строка, содержащая код на Python, содержащий ошибки", "en": "string containing Python code that contains errors"}, "feedback": {"ru": "строка, содержащая описание ошибок от линтера", "en": "string containing a description of errors from the linter"}}, "outputs": {"ru": "одномерный массив строк размера n_samples, где n_samples - количество сэмплов, требуемое для подсчета метрики pass@k", "en": "one-dimensional array of strings of size n_samples, where n_samples is the number of samples required to calculate the pass@k metric"}, "meta": {"id": {"ru": "идентификатор задания", "en": "task id"}, "canonical_code": {"ru": "каноническое решение задачи (код без ошибок/предупреждений линтера) задания", "en": "canonical solution to the task (code without linter errors/warnings)"}}}, "prompts": ["Перепиши код с учетом ошибок полученных от линтера. Ошибки указывают на критические слабые места: потенциальные баги, уязвимости безопасности и нарушения принципов чистого кода. Исправь ВСЕ указанные ошибки без исключений, сохрани исходную логику программы, строго соблюдай PEP-8 для Python, не добавляй комментарии и объяснения. \nЗамечания линтера:\n{feedback}\n\nКод:\n{code}\nПриведите ответ в формате, соответствующем шаблону для ответа:\n```python\n<code> ```", "Исправьте указанные ошибки линтера в данном коде. Замечания линтера выявляют проблемы читаемости и потенциальные точки отказа. Устраните нарушения точечно по списку, проверьте согласованность именования переменных, не изменяйте логику кода, гарантируйте отсутствие дополнительных предупреждений. \nКод:\n{code}\nОшибки от линтера:\n{feedback}\nНе пытайтесь вести диалог и давать текстовые пояснения. Ответ оформите, используя markdown разметку:\n```python\n<code> ```", "Внеси правки для устранения замечаний линтера. Каждое замечание - индикатор риска для стабильности кода. Точно следуй нумерации ошибок, не оптимизируй код помимо исправлений, выводи только финальную версию кода.\nКод: \n{code}\nОшибки:\n{feedback}\nСвой ответ оформи по шаблону:\n```python\n<code> ```", "Отрефакторите этот код, исправив ошибки. Список ошибок демонстрирует нарушения code style и антипаттерны. Добейтесь отсутствия ошибок при проверки линтером, сохраните сигнатуры функций, не давайте никаких пояснений в ответе.\nОшибки:\n{feedback}\nИсходный код:\n{code}\nКод в ответе оберните в блок:\n```python\n<code> ```", "Вы - разработчик-программист на языке Python. Линтер выдал предупреждения. Предупреждения линтера сигнализируют о проблемах в качестве кода. Перепишите код для их устранения. Обратите внимание на циклы и обработку исключений, соблюдайте отступы в 4 пробела, не затрагивайте рабочую логику кода. \nКод:\n{code}\nСписок ошибок:\n{feedback}\nФормат ответа:\n```python\n<code> ```", "Вот код и список ошибок от линтера. Ошибки указывают на слабые места в коде. Сделай так, чтобы код был без ошибок. Устрани все нарушения из списка. Исправь даже low-priority замечания. \nКод:\n{code}\nОшибки от линтера:\n{feedback}\nНе пиши любые текстовые блоки кроме кода. Не веди диалог, не давай объяснений, не рассуждай. Оформление ответа:\n```python\n<code> ```", "Ты - senior разработчик на языке Python. Перед тобой код с ошибками от линтера. Устрани все нарушения из списка. Измени код, проверяя консистентность кавычек, отступы в многострочных выражениях. Не предлагай альтернативные реализации. Ответ должен содержать только валидный исполняемый код. \nКод:\n{code}\nОшибки:\n{feedback}\nОберните ваш код в блок:\n```python\n<code> ```", "Следующий код не проходит проверку линтером. Несоответствие стандартам снижает поддерживаемость кода. Приведите код в соответствие с требованиями. Добейтесь соответствия гайдлайну языка, проверьте переносы строк (max 79 символов для Python), не изменяйте алгоритмы без необходимости. \nКод:\n{code}\nОшибки:\n{feedback}\nТребования к ответу:\n```python\n<code> ```", "Обновите код, исправив все указанные стилевые ошибки. Стилевые ошибки снижают читаемость и увеличивают стоимость поддержки. Обратите внимание на расстановку пробелов в [], (), устраните смешанные табы/пробелы, проверьте выравнивание многострочных параметров. Не пишите никаких комментариев к коду. \nКод:\n{code}\nОшибки:\n{feedback}\nКак оформить код:\n```python\n<code> ```", "Переработайте код, чтобы он соответствовал стандартам качества. Замечания линтера: \n{feedback}\nКод:\n{code}\nПравила оформления:\nКод должен быть внутри блока:\n```python\n<code> ```"], "metrics": {"pass@k": {"ru": "Метрика pass@k измеряет долю тестовых случаев, которые программа проходит, от общего количества тестовых случаев", "en": "The pass@k metric measures the proportion of test cases that a program passes out of the total number of test cases."}}}