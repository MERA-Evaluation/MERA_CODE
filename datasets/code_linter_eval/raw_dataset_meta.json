{"dataset_name": "CodeLinterEval", "license": "MERA_private", "dataset_size": "120", "description": "Benchmark for evaluation of correct code generation based on incorrect code and a list of errors/warnings from the linter.", "modalities": ["code"], "skills": ["Instruction following", "Perception(Python)", "Code changing"], "domains": [], "universal_domains": [], "synt_source_models": "", "data_example": {"instruction": "Перепиши код с учетом ошибок полученных от линтера. \nКод:\n{code}\nОшибки от линтера:\n{feedback}\nВывод должен быть строго в таком формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "inputs": {"code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "feedback": "E111: indentation is not a multiple of 4 in 2 line\nE231: missing whitespace after ',' in 2 line\nE111: indentation is not a multiple of 4 in 4 line\nW292: no newline at end of file in 4 line\n"}, "outputs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "meta": {"id": 0, "canonical_code": "\ndef find_repeated_character(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}}, "data_field_descriptions": {"instruction": {"ru": "строка, содержащая формулировку запроса к языковой модели", "en": "string containing the formulation of a query to the language model"}, "inputs": {"code": {"ru": "строка, содержащая код на Python, содержащий ошибки", "en": "string containing Python code that contains errors"}, "feedback": {"ru": "строка, содержащая описание ошибок от линтера", "en": "string containing a description of errors from the linter"}}, "outputs": {"ru": "одномерный массив строк размера n_samples, где n_samples - количество сэмплов, требуемое для подсчета метрики pass@k", "en": "one-dimensional array of strings of size n_samples, where n_samples is the number of samples required to calculate the pass@k metric"}, "meta": {"id": {"ru": "Номер-идентификатор вопроса в датасете", "en": "task id"}, "canonical_code": {"ru": "каноническое решение задачи (код без ошибок/предупреждений линтера) задания", "en": "canonical solution to the task (code without linter errors/warnings)"}}}, "prompts": ["Перепиши код с учетом ошибок полученных от линтера. \nКод:\n{code}\nОшибки от линтера:\n{feedback}\nВывод должен быть строго в таком формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "Исправь указанные ошибки линтера в данном коде. \nКод: \n{code}\nОшибки:\n{feedback}\nВывод должен содержать только обновленную функцию в формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "Перед тобой код с ошибками. Внеси правки, чтобы устранить следующие замечания линтера:\n{feedback}\nИсходный код:\n{code}\nВывод должен быть в формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "Отрефактори этот код, исправив все ошибки. \nКод:\n{code}\nСписок ошибок:\n{feedback}\nВывод должен содержать только исправленную функцию в формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "Линтер выдал предупреждения. Перепиши код, чтобы их устранить. \nКод:\n{code}\nОшибки от линтера:\n{feedback}\nВывод должен содержать только исправленную функцию в формате:\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]\nНикаких других символов или текста!", "Вот код и список ошибок от линтера. Сделай так, чтобы код был без ошибок. \nКод:\n{code}\nОшибки:\n{feedback}\nВывод — только код функции (с комментариями, если они были):\n[PYTHON]\ndef имя_функции(аргументы):\n    тело_функции\n[/PYTHON]", "Перед тобой код с ошибками от линтера. Устрани все нарушения из списка. \nКод:\n{code}\nОшибки:\n{feedback}\n", "Следующий код не проходит проверку линтером. Приведи его в соответствие с требованиями. \nКод:\n{code}\nОшибки:\n{feedback}", "Обнови код, исправив все указанные стилевые ошибки. \nКод:\n{code}\nОшибки:\n{feedback}\n", "Переработай код, чтобы он соответствовал стандартам качества. Замечания линтера:\n{feedback}\n\nКод:\n{code}\n"], "metrics": {"pass@k": {"ru": "Метрика pass@k измеряет долю тестовых случаев, которые программа проходит, от общего количества тестовых случаев", "en": "The pass@k metric measures the proportion of test cases that a program passes out of the total number of test cases."}}}