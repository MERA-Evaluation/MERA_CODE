{
    "dataset_name": "UnitTestsPublic",
    "license": "MERA_private",
    "dataset_size": "len(DATA)",
    "description": "Evaluation of unit-test generation for functions and methods in five programming languages (Java, Python, Go, JavaScript, and C#).",
    "modalities": [
        "code"
    ],
    "skills": [
        "Unit-tests generation",
        "Code generation",
        "Instruction following"
    ],
    "domains": [],
    "universal_domains": [],
    "data_example": {
        "instruction": "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nОтвет:",
        "inputs": {
            "focal_func": "```go\nfunc (s *Session) Model(value interface{}) *Session {\n\t// nil or different model, update refTable\n\tif s.refTable == nil || reflect.TypeOf(value) != reflect.TypeOf(s.refTable.Model) {\n\t\ts.refTable = schema.Parse(value, s.dialect)\n\t}\n\treturn s\n}\n```",
            "focal_func_context": "```go\n#gem-orm/day3-save-query/session/table.go\npackage session\n\nimport (\n\t\"fmt\"\n\t\"geeorm/log\"\n\t\"reflect\"\n\t\"strings\"\n\n\t\"geeorm/schema\"\n)\n\n// Model assigns refTable\n\n#focal function/method here\n\n\n// RefTable returns a Schema instance that contains all parsed fields\nfunc (s *Session) RefTable() *schema.Schema {\n\tif s.refTable == nil {\n\t\tlog.Error(\"Model is not set\")\n\t}\n\treturn s.refTable\n}\n\n// CreateTable create a table in database with a model\nfunc (s *Session) CreateTable() error {\n\ttable := s.RefTable()\n\tvar columns []string\n\tfor _, field := range table.Fields {\n\t\tcolumns = append(columns, fmt.Sprintf(\"%s %s %s\", field.Name, field.Type, field.Tag))\n\t}\n\tdesc := strings.Join(columns, \",\")\n\t_, err := s.Raw(fmt.Sprintf(\"CREATE TABLE %s (%s);\", table.Name, desc)).Exec()\n\treturn err\n}\n\n// DropTable drops a table with the name of model\nfunc (s *Session) DropTable() error {\n\t_, err := s.Raw(fmt.Sprintf(\"DROP TABLE IF EXISTS %s\", s.RefTable().Name)).Exec()\n\treturn err\n}\n\n// HasTable returns true of the table exists\nfunc (s *Session) HasTable() bool {\n\tsql, values := s.dialect.TableExistSQL(s.RefTable().Name)\n\trow := s.Raw(sql, values...).QueryRow()\n\tvar tmp string\n\t_ = row.Scan(&tmp)\n\treturn tmp == s.RefTable().Name\n}\n```",
            "test_func_type": "тестовую функцию",
            "test_func_context": "```\npackage session\nimport (\n\t\"testing\"\n)\ntype User struct {\n\tName string `geeorm:\"PRIMARY KEY\"`\n\tAge  int\n}\n```",
            "language": "Go",
            "focal_file_path": "gem-orm/day3-save-query/session/table.go",
            "test_file_path": "gem-orm/day3-save-query/session/table_test.go",
            "test_framework": ""
        },
        "outputs": "func TestSession_Model(t *testing.T) {\n\ts := NewSession().Model(&User{})\n\ttable := s.RefTable()\n\ts.Model(&Session{})\n\tif table.Name != \"User\" || s.RefTable().Name != \"Session\" {\n\t\tt.Fatal(\"Failed to change model\")\n\t}\n}",
        "meta": {
            "id": 9,
            "repo_id": "312956606",
            "focal_func_type": "method"
        }
    },
    "data_field_descriptions": {
        "instruction": {
            "ru": "default",
            "en": "default"
        },
        "inputs": {
            "focal_func": {
                "ru": "тестируемая функция/метод для тестирования",
                "en": "the focal function/method"
            },
            "test_func_type": {
                "ru": "тип теста (function/method)",
                "en": "a type of the test"
            },
            "test_func_context": {
                "ru": "контекст тестовой функции, собранный из тестового файла - импорты, глобальные переменные, краткое описание других функций/классов",
                "en": "test function context from the test file"
            },
            "language": {
                "ru": "язык программирования (python, java, csharp, js, go)",
                "en": "programming language (python, java, csharp, js, go)"
            },
            "focal_file_path": {
                "ru": "путь к файлу тестируемой функции/метода в исходном репозитории",
                "en": "the focal function/method file path"
            },
            "test_file_path": {
                "ru": "путь к файлу тестовой функции/метода в исходном репозитории",
                "en": "the test function/method file path"
            },
            "focal_func_context": {
                "ru": "контекст фокальной функции: текст фокального файла, откуда вырезан сам тестируемый метод и заменен на текст `#focal function/method here`",
                "en": "focal function context: the focal file text where the focal method is replaced with the text `#focal function/method here`"
            },
            "test_framework": {
                "ru": "тестовый фреймворк, который необходимо использовать (только для JS)",
                "en": "test framework that should be used (only for JS)"
            }
        },
        "outputs": {
            "ru": "default",
            "en": "default"
        },
        "meta": {
            "id": {
                "ru": "default",
                "en": "default"
            },
            "repo_id": {
                "ru": "Идентификатор репозитория",
                "en": "The github id of the repository"
            },
            "focal_func_type": {
                "ru": "тип тестируемоего объекта(function/method)",
                "en": "a type of the focal object"
            }
        }
    },
    "prompts": [
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nОтвет:",
        "Составь тест для следующего кода на языке {language}, расположенного в '{focal_file_path}'. В ответе должен быть только тест.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле:  \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nОтвет:",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nПользователь уже написал некоторый код в тестовом файле, учитывай его при написании теста: \n{test_func_context}\nДля тебя собран код из репозитория, который может помочь тебе в написании теста: \n{focal_func_context}\nОтвет:",
        "Сделай тест для этого кода, написанного на {language} из файла '{focal_file_path}'. Напиши только тестовый код.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nУчитывай контекст приведенного кода: \n{focal_func_context}\nОтвет:",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле: \n{test_func_context}\nОбращай внимание на следующий код при написании теста: \n{focal_func_context}\nОтвет:",
        "Составь тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nСледующие чанки кода собранные из репозитория, могут помочь тебе в составлении теста: \n{focal_func_context}\nОтвет:",
        "Сгенерируй тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле: \n{test_func_context}\nСледующие чанки кода собранные из репозитория, могут помочь тебе в составлении теста: \n{focal_func_context}\nОтвет:",
        "Напиши тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тестовый код.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nПользователь уже написал некоторый код в тестовом файле, учитывай его при написании теста: \n{test_func_context}\nОбращай внимание на следующий код при написании теста: \n{focal_func_context}\nОтвет:",
        "Сгенерируй тест для этого кода на языке {language} из файла '{focal_file_path}'. Напиши только тест без пояснений и комментариев.\n{focal_func}\nТебе необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nОбязательно учитывай код, собранный из будущего тестового файла: \n{test_func_context}\nТебе можно использовать следующие сущности, импортированные или объявленные в тестовом файле: \n{focal_func_context}\nОтвет:",
        "Разработайте тест для этой части программы на языке {language} из файла '{focal_file_path}'. Напиши только тестовый код.\n{focal_func}\nВам необходимо написать {test_func_type} на языке {language}. Тест будет помещен в файл '{test_file_path}'.\nИспользуй {test_framework} тестовый фреймворк для написания тестового кода.\nПользователь уже написал некоторый код в тестовом файле, учитывайте его при написании теста: \n{test_func_context}\nДля вас собран код из репозитория, который может помочь вам в написании теста:\n{focal_func_context}\nОтвет:"
    ],
    "metrics": {
        "CodeBLEU": {
            "ru": "Code BLEU учитывает соответствие двух частей кода, аналогичное исходному BLEU, но может также учитывать грамматическую и логическую корректность, используя абстрактное синтаксическое дерево и структуру потока данных.",
            "en": "CodeBLEU considers the surface match similar with the original BLEU, but can also consider the grammatical correctness and the logic correctness, leveraging the abstract syntax tree and the data-flow structure.",
            "short": "code_bleu"
        }
    }
}