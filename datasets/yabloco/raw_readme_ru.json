{
    "Описание задачи": "Генерация кода на C/C++ с учетом длинного контекста на уровне функций",
    "Мотивация": "YABLoCo — это бенчмарк для генерации кода с учетом длинного контекста, включающий тестовый набор из 208 функций, отобранных из четырёх крупных\nрепозиториев, содержащих тысячи функций. Набор данных включает метаинформацию о функциях, контексты функций с различным уровнем\nзависимостей, строку документации, тела функций и графы вызовов для каждого репозитория. Цель бенчмарка -- генерация тела функции в рамках\nбольших репозиториев объёмом от 200K до 2,000K строк кода (LoC) на языках C и C++, которые ранее не охватывались аналогичными бенчмарками.\nХотя бенчмарк в целом допускает использование произвольного поиска контекста по репозиториям, в предоставленной версии используется\noracle контекст — функции, извлечённые из графа вызовов, от которых должна зависеть генерируемая функция. Имея на входе oracle context,\nстроку документации и сигнатуру функции, модель генерирует соответствующее тело функции, которое затем тестируется с использованием \nтестов из репозитория. Модель должна понять код из предоставленного контекста и краткое описание из строки документации, чтобы\nсгенерировать тело метода, реализующее необходимую функциональность. Оценка производится по двум метрикам: pass@1, отражающей\nкорректность реализованной функциональности, и exact match, высокое значение которой может указывать на переобучение.",
    "Создание датасета": "Крупнейшими и наиболее популярными (по количеству звёзд) выбранными репозиториями GitHub стали: llvm-project, bullet3, openssl и redis. Ограниченное\nколичество репозиториев объясняется высокими затратами на включение большего числа проектов — в частности, необходимостью сборки и компиляции,\nреализации Dockerfile-файлов, запуска тестов и расчёта покрытия тестами. Из каждого из выбранных репозиториев мы извлекли все функции вместе с их\nвызовами, датой последнего коммита, комментариями в формате docstring, длиной кода и комментариев, а также числом попаданий в тесты. Вызовы функций\nбыли отнесены к одной из следующих пяти категорий: 'none', 'stdlib', 'file', 'package', 'project'. В частности, 'stdlib' — для системных вызовов,\n'file' и 'package' — для вызовов внутри одного файла и одного пакета соответственно, 'project' — для вызовов функций на уровне проекта. Если функция\nне имела зависимостей, она попадала в категорию 'none'. Мы отфильтровали функции с чрезмерно короткой или длинной реализацией, без тестового покрытия\nили комментариев. Затем были обнаружены и удалены почти дублирующие друг друга фрагменты кода. После этого оставшийся набор функций в каждой\nкатегории контекста был отсортирован по дате последнего коммита и числу тестовых попаданий — с приоритетом к более свежим и лучше покрытым тестами\nфункциям. Функции из репозиториев отбирались автоматически, без учёта качества docstring-комментариев. Поэтому качество docstring было дополнительно\nоценено вручную. В дополнение к сбору и очистке данных мы сгенерировали граф вызовов для каждого репозитория. Граф содержал все функции с уникальными\nидентификаторами, их вызывающие и вызываемые функции, а также метаданные: длину, путь к файлу, позицию в файле, docstring, дату последнего изменения,\nколичество попаданий в тесты и категорию.",
    "Авторы": "Айдар Валеев, Роман Гараев, Вадим Ломшаков, Ирина Пионтковская, Владимир Иванов, Израэль Адевуйи"
}